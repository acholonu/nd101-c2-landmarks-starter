AWSTemplateFormatVersion: 2010-09-09
Description: >
  This cloud formation template deploys a VPC, with a single public subnet with one
  Availability Zone.  It deploys an Internet Gateway, with a default route on the public subnet.
  Incoming traffic (ingress) is only coming through SSH and HTTP from my person IP. It allows all out
  going traffic.  

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
  
  VpcCIDR:
    Description: > 
      The IP range (CIDR notation) for this VPC.  So every IP address in this VPC
      will start with the first 16 bits with 10.0.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PublicSubnetCIDR:
    Description: >
      Defines the IP ranges that exist in this public subnet (public subnet1). Every IP address in this subnet will
      start with 10.0.0. This public subnet will be in the first Availability Zone.
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  GPUInstanceTypeParameter:
    Description: > 
      Defines the GPU family of EC2 instance to be used for the remote connection.
    Type: String
    AllowedValues: 
      - "g4ad.4xlarge" 
      - "g4ad.2xlarge" 
      - "g4ad.xlarge" 
      - "g2.2xlarge"
    ConstraintDescription: Must be a valid EC2 GPU-enabled (& cheap) instance type.

  SSHKeyNameParameter:
    Description: >
      Name of the SSH key to be used to ssh into the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair

  PersonalIPParameter:
    Description: >
      The ip addresses that able to SSH into the EC2 instance.
    Type: String
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  
  AMIImageParameter:
    Description: >
      OS image to install on EC2 Instance.
    Type: String
    Default: ami-02f3416038bdb17fb
    AllowedValues:
      - ami-02f3416038bdb17fb #Ubuntu Server 22.04 LTS (HVM), SSD Volume Type (Just OS)
      - ami-046fbfc7e87daafda # Community Image, https://us-east-2.console.aws.amazon.com/ec2/home?region=us-east-2#AMICatalog:

# Reference: https://s3.us-west-2.amazonaws.com/cloudformation-templates-us-west-2/VPC_Single_Instance_In_Subnet.template
Resources:
  # defining our Virtual Private cloud
  # Using the parameters to define the CIDR range in our VPC
  VPC: # Name of VPC is VCP
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Vpc
        - Key: Course
          Value: Deep Learning
        - Key: Project
          Value: Udacity Project 2 - Landmark
        - Key: Author
          Value: Ugochi Jones
        - Key: Application
          Value: !Ref AWS::StackId

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      # Selected the first element in GetAZs list.
      AvailabilityZone: us-east-2a # Ohio availability zone A
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
        - Key: Application
          Value: !Ref AWS::StackId

# Add internet access
  # Setting up an internet gateway so our VPC can have internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName 
        - Key: Application
          Value: !Ref AWS::StackId

  # InternetGatewayAttachment, attaches a gateway to a particular VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      # The Reference here is NOT referencing a parameter
      # Instead it is referencing the name of the resource that has been created
      # in this file.  So there is a resource named VPC
      # So !REF can reference a parameter or resource
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes
        - Key: Application
          Value: !Ref AWS::StackId

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PersonalSSHSecGroup:
    # Security groups are linked to a resource (e.g., Servers, databases, or Load Balancers)
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22 # This is port for SSH
          ToPort: 22
          #CidrIp: 0.0.0.0/0 # Wild card for testing 
          CidrIp: !Ref PersonalIPParameter #My personal 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          #CidrIp: 0.0.0.0/0
          CidrIp: !Ref PersonalIPParameter #My personal
  
  # Python 3.10.4 already installed on Ubuntu, so I am also assuming pip3 is installed
  # Release notes: https://discourse.ubuntu.com/t/jammy-jellyfish-release-notes/24668?_ga=2.185082281.102253668.1663666965-1685001298.1663666965
  # Reference: https://community.f5.com/t5/technical-articles/aws-cloudformation-ec2-userdata-example-to-install-nginx-plus-on/ta-p/285566
  # The pipe (aka. |) in YAML means preserve the newline for the multiline string. The carot (aka. >), means convert newlines(\n)
  # to spaces in a multiline string. 
  GPUInstance:
    Type: AWS::EC2::Instance
    DependsOn: PersonalSSHSecGroup
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            apt-get update -y
            sudo curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            sudo apt install unzip
            sudo unzip awscliv2.zip
            sudo ./aws/install
            sudu curl "https://udacity-dlnfd.s3-us-west-1.amazonaws.com/datasets/landmark_images.zip"
            sudo unzip landmark_images.zip
            sudo pip3 install numpy torch torchvision cv2 PIL pandas matplotlib jupyter pyyaml joblib scikit-learn scipy
      InstanceType: !Ref GPUInstanceTypeParameter
      AvailabilityZone: us-east-2a
      ImageId: !Ref AMIImageParameter
      KeyName: !Ref SSHKeyNameParameter
      #SecurityGroups:
      #  - !Ref PersonalSSHSecGroup
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref PersonalSSHSecGroup 
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "Name"
          Value: "UJ_GPU_Instance"
        - Key: "Course"
          Value: "Deep Learning"
        - Key: "Project"
          Value: "Udacity Project 2 - Landmarks Project"
        - Key: "EC2 Setup"
          Value: "Ubuntu 22.04 LTS, SSD Volume, with python packages pytorch, jupyter, pandas, numpy, joblib, scikit-learn, scipy, PIL, pyyaml, cv2"

# The purpose of the output section is to create variables connected to the resources
# you created in this cloudformation script.  Then other cloudformation scripts can
# refer to these variables to interact within their scripts.
# This allows you to compartmentalize scripts (Networking, Storage, Servers)
# Outputs are totally OPTIONAL.  But they are helpful if you want to 1) import into
# another stack, 2) return in a response, 3) view in the AWS console.
# These are GLOBAL VARIABLES!!!!  So they need to be unique throughout the account.

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      # EnvironmentName is a parameter we defined.
      Name: !Sub ${EnvironmentName}-VPCID

  # TO DO: Not sure if this is going to work
  VpcCIDR:
    Description: A reference to the Cidr range for ${EnvironmentName}-VPCID
    Value: !Ref VpcCIDR
    Export:
      # EnvironmentName is a parameter we defined.
      Name: !Sub ${EnvironmentName}-VpcCIDR

  VPCPublicRouteTable:
    Description: Public Routing
    Value: !Ref PublicRouteTable
    Export:
      # Sub Returns the PublicRouteTable ID concatenated with `-PUB-RT`
      Name: !Sub ${EnvironmentName}-PUB-RT

  VPCPublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${EnvironmentName}-PUB-SN

  EC2Instance: 
    Description: The name and type of the EC2 Instance created.
    Value: !Ref GPUInstance
    Export:
      Name: !Sub ${EnvironmentName}-EC2-Instance

  EC2PublicID:
    Description: Public IP address of the newly created EC2 instance
    Value: !GetAtt GPUInstance.PublicIp
